{"ast":null,"code":"var _jsxFileName = \"/Users/melissajimison/Documents/c5/exercise/Data-Structures-Practice/algorithms/sage/src/App.js\";\nimport React, { Component } from 'react';\nimport Movies from './Movies';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      gifs: []\n    };\n  }\n\n  componentDidMount() {\n    const baseUrl = 'api.giphy.com/v1/gifs/search';\n    const query = 'babyyoda';\n    const api_key = process.env.REACT_APP_GIPHY_API_KEY;\n    fetch(`https://${baseUrl}?api_key=${api_key}&q=${query}&limit=5`).then(res => res.json()).then(result => {\n      this.setState({\n        isLoaded: true,\n        gifs: result.data\n      });\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      this.setState({\n        isLoaded: true,\n        error\n      });\n    });\n  }\n\n  render() {\n    const {\n      error,\n      isLoaded,\n      gifs\n    } = this.state;\n\n    if (error) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, \"Error: \", error.message);\n    } else if (!isLoaded) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"Loading...\");\n    } else {\n      return React.createElement(Movies, {\n        gifs: this.state.gifs,\n        handleOnClick: this.handleOnClick,\n        clicked: this.clicked,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      });\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/melissajimison/Documents/c5/exercise/Data-Structures-Practice/algorithms/sage/src/App.js"],"names":["React","Component","Movies","App","constructor","props","state","error","isLoaded","gifs","componentDidMount","baseUrl","query","api_key","process","env","REACT_APP_GIPHY_API_KEY","fetch","then","res","json","result","setState","data","render","message","handleOnClick","clicked"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAO,WAAP;;AAEA,MAAMC,GAAN,SAAkBF,SAAlB,CAA4B;AAC1BG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,IADI;AAEXC,MAAAA,QAAQ,EAAE,KAFC;AAGXC,MAAAA,IAAI,EAAE;AAHK,KAAb;AAKD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,UAAMC,OAAO,GAAG,8BAAhB;AACA,UAAMC,KAAK,GAAG,UAAd;AACA,UAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,uBAA5B;AAEAC,IAAAA,KAAK,CAAE,WAAUN,OAAQ,YAAWE,OAAQ,MAAKD,KAAM,UAAlD,CAAL,CACGM,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAGKG,MAAD,IAAY;AACV,WAAKC,QAAL,CAAc;AACZd,QAAAA,QAAQ,EAAE,IADE;AAEZC,QAAAA,IAAI,EAAEY,MAAM,CAACE;AAFD,OAAd;AAID,KARL,EASI;AACA;AACA;AACChB,IAAAA,KAAD,IAAW;AACT,WAAKe,QAAL,CAAc;AACZd,QAAAA,QAAQ,EAAE,IADE;AAEZD,QAAAA;AAFY,OAAd;AAID,KAjBL;AAmBD;;AAEDiB,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEjB,MAAAA,KAAF;AAASC,MAAAA,QAAT;AAAmBC,MAAAA;AAAnB,QAA4B,KAAKH,KAAvC;;AACA,QAAIC,KAAJ,EAAW;AACT,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAaA,KAAK,CAACkB,OAAnB,CAAP;AACD,KAFD,MAEO,IAAI,CAACjB,QAAL,EAAe;AACpB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACD,KAFM,MAEA;AACL,aACE,oBAAC,MAAD;AACE,QAAA,IAAI,EAAE,KAAKF,KAAL,CAAWG,IADnB;AAEE,QAAA,aAAa,EAAE,KAAKiB,aAFtB;AAGE,QAAA,OAAO,EAAE,KAAKC,OAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAMD;AACF;;AAlDyB;;AAqD5B,eAAexB,GAAf","sourcesContent":["import React, {Component} from 'react';\nimport Movies from './Movies';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      gifs: []\n    };\n  }\n\n  componentDidMount() {\n    const baseUrl = 'api.giphy.com/v1/gifs/search'\n    const query = 'babyyoda'\n    const api_key = process.env.REACT_APP_GIPHY_API_KEY\n\n    fetch(`https://${baseUrl}?api_key=${api_key}&q=${query}&limit=5`)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            gifs: result.data\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n  render() {\n    const { error, isLoaded, gifs } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <Movies\n          gifs={this.state.gifs}\n          handleOnClick={this.handleOnClick}\n          clicked={this.clicked}/>\n      );\n    }\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}