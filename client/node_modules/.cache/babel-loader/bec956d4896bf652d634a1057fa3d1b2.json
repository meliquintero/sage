{"ast":null,"code":"async function getUser() {\n  const response = await fetch('/api/user');\n  const body = await response.json();\n  if (response.status !== 200) throw Error(body.message);\n  return body;\n}\n\n;\n\nasync function getUserFavoriteMovies(user) {\n  const response = await fetch(`/api/movies/${user.username}`);\n  const body = await response.json();\n  if (response.status !== 200) throw Error(body.message);\n  return body;\n}\n\n;\n\nasync function uploadMovie(e) {\n  const response = await fetch('/api/movie', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      movie: e\n    })\n  });\n}\n\n;\nexport default {\n  getUser,\n  getUserFavoriteMovies,\n  uploadMovie\n};","map":{"version":3,"sources":["/Users/melissajimison/Documents/c5/exercise/Data-Structures-Practice/algorithms/sage/client/src/apiWrapper.js"],"names":["getUser","response","fetch","body","json","status","Error","message","getUserFavoriteMovies","user","username","uploadMovie","e","method","headers","JSON","stringify","movie"],"mappings":"AAAA,eAAeA,OAAf,GAAyB;AACvB,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,WAAD,CAA5B;AACA,QAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACA,MAAIH,QAAQ,CAACI,MAAT,KAAoB,GAAxB,EAA6B,MAAMC,KAAK,CAACH,IAAI,CAACI,OAAN,CAAX;AAE7B,SAAOJ,IAAP;AACD;;AAAA;;AAED,eAAeK,qBAAf,CAAqCC,IAArC,EAA2C;AACzC,QAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAE,eAAcO,IAAI,CAACC,QAAS,EAA9B,CAA5B;AACA,QAAMP,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACA,MAAIH,QAAQ,CAACI,MAAT,KAAoB,GAAxB,EAA6B,MAAMC,KAAK,CAACH,IAAI,CAACI,OAAN,CAAX;AAC7B,SAAOJ,IAAP;AACD;;AAAA;;AAED,eAAeQ,WAAf,CAA2BC,CAA3B,EAA8B;AAC5B,QAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,YAAD,EAAe;AACzCW,IAAAA,MAAM,EAAE,MADiC;AAEzCC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAFgC;AAKzCX,IAAAA,IAAI,EAAEY,IAAI,CAACC,SAAL,CAAe;AAAEC,MAAAA,KAAK,EAAEL;AAAT,KAAf;AALmC,GAAf,CAA5B;AAOD;;AAAA;AAED,eAAe;AAACZ,EAAAA,OAAD;AAAUQ,EAAAA,qBAAV;AAAiCG,EAAAA;AAAjC,CAAf","sourcesContent":["async function getUser() {\n  const response = await fetch('/api/user');\n  const body = await response.json();\n  if (response.status !== 200) throw Error(body.message);\n\n  return body;\n};\n\nasync function getUserFavoriteMovies(user) {\n  const response = await fetch(`/api/movies/${user.username}`);\n  const body = await response.json();\n  if (response.status !== 200) throw Error(body.message);\n  return body;\n};\n\nasync function uploadMovie(e) {\n  const response = await fetch('/api/movie', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ movie: e }),\n  });\n};\n\nexport default {getUser, getUserFavoriteMovies, uploadMovie}\n"]},"metadata":{},"sourceType":"module"}